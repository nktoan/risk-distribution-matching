Environment:
	Python: 3.11.2
	PyTorch: 2.0.0+cu117
	Torchvision: 0.15.1+cu117
	CUDA: 11.7
	CUDNN: 8500
	NumPy: 1.24.2
	PIL: 9.5.0
Args:
	algorithm: RDM
	checkpoint_freq: None
	data_dir: /home/s222165627/causal_optimisation_dg/quantile_rm/DomainBed/domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	output_dir: /home/s222165627/source_code_conf/risk-distribution-matching/DomainBed/domainbed
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: None
	task: domain_generalization
	test_envs: [0]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 88
	class_balanced: False
	data_augmentation: True
	lr: 5e-05
	nonlinear_classifier: False
	rdm_lambda: 5.0
	rdm_lr: 1.5e-05
	rdm_penalty_anneal_iters: 1500
	resnet18: False
	resnet_dropout: 0.0
	variance_weight: 0.004
	weight_decay: 0.0
/home/s222165627/.conda/envs/domainbed/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/s222165627/.conda/envs/domainbed/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
env0_in_acc   env0_out_acc  env1_in_acc   env1_out_acc  env2_in_acc   env2_out_acc  env3_in_acc   env3_out_acc  epoch         erm_loss      matching_pen  mem_gb        rdm_lambda    step          step_time     total_loss    update_count  variance_pen  worst_domain 
0.2971323978  0.2885085575  0.2169509595  0.2115384615  0.3907185629  0.3532934132  0.2089694656  0.2356687898  0.0000000000  1.9786694050  0.0468626022  21.581091880  5.0000000000  0             2.4797036648  1.9786694050  1.0000000000  0.2268440276  2.0000000000 
0.8706528371  0.8508557457  0.9930703625  0.9615384615  1.0000000000  0.9700598802  0.9834605598  0.9490445860  19.760479041  0.1288717723  0.0342034690  21.756355285  5.0000000000  300           0.8076620626  0.1288717723  151.50000000  0.4738515880  1.3933333333 
0.8547895058  0.8704156479  0.9984008529  0.9551282051  1.0000000000  0.9700598802  0.9939567430  0.9541401274  39.520958083  0.0203108139  0.0049565601  21.756355285  5.0000000000  600           0.8075430179  0.0203108139  451.50000000  0.1412626322  1.4433333333 
0.8615009152  0.8679706601  0.9946695096  0.9572649573  0.9977544910  0.9760479042  0.9955470738  0.9541401274  59.281437125  0.0165994361  0.0032448800  21.756355285  5.0000000000  900           0.8072469004  0.0165994361  751.50000000  0.1306182097  1.3166666667 
0.8938377059  0.8973105134  0.9989339019  0.9594017094  0.9992514970  0.9700598802  0.9961832061  0.9630573248  79.041916167  0.0092081741  0.0021143818  21.756355285  5.0000000000  1200          0.8073850036  0.0092081741  1051.5000000  0.0770726630  1.4333333333 
0.8309945088  0.8410757946  0.9968017058  0.9508547009  1.0000000000  0.9700598802  0.9971374046  0.9528662420  98.802395209  0.0097006370  0.0014847247  21.756355285  5.0000000000  1500          0.8075382892  0.0097466991  1351.5000000  0.0890800825  1.2866666667 
0.8621110433  0.8606356968  0.9984008529  0.9679487179  1.0000000000  0.9670658683  0.9980916031  0.9681528662  118.56287425  0.0032530202  0.0004141776  21.757331848  5.0000000000  1800          0.8071193496  0.0055085225  1651.5000000  0.0461536054  1.1766666667 
0.8584502746  0.8753056235  0.9994669510  0.9722222222  1.0000000000  0.9820359281  0.9977735369  0.9579617834  138.32335329  0.0030424075  0.0002660465  21.757331848  5.0000000000  2100          0.8071862372  0.0045714614  1951.5000000  0.0497053188  1.2666666667 
